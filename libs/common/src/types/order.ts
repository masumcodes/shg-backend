// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.20.3
// source: order.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "order";

export enum OrderStatus {
  ORDER_STATUS_UNSPECIFIED = 0,
  ORDER_STATUS_PENDING = 1,
  ORDER_STATUS_CONFIRMED = 2,
  ORDER_STATUS_SHIPPED = 3,
  ORDER_STATUS_DELIVERED = 4,
  ORDER_STATUS_CANCELLED = 5,
  UNRECOGNIZED = -1,
}

/** Pagination DTO */
export interface PaginationDto {
  page: number;
  skip: number;
}

export interface Order {
  id: string;
  productId: string;
  memberId: string;
  memberName: string;
  quantity: number;
  status: OrderStatus;
  createdAt: string;
  updatedAt: string;
  /** Address fields */
  state: string;
  city: string;
  district: string;
  village: string;
  /** string shg_id = 14; */
  pincode: string;
}

/** Create Order */
export interface CreateOrderRequest {
  productId: string;
  memberId: string;
  quantity: number;
  /** Address fields */
  city: string;
  state: string;
  district: string;
  village: string;
  pincode: string;
}

export interface CreateOrderResponse {
  order: Order | undefined;
}

/** Get Order */
export interface GetOrderRequest {
  id: string;
}

export interface GetOrderResponse {
  order: Order | undefined;
}

/** List Orders */
export interface ListOrdersRequest {
  memberId: string;
}

export interface ListOrdersResponse {
  orders: Order[];
}

/** Update Order */
export interface UpdateOrderRequest {
  id: string;
  status: OrderStatus;
}

export interface UpdateOrderResponse {
  order: Order | undefined;
}

/** Delete Order */
export interface DeleteOrderRequest {
  id: string;
}

export interface DeleteOrderResponse {
  success: boolean;
}

export const ORDER_PACKAGE_NAME = "order";

export interface OrderServiceClient {
  createOrder(request: CreateOrderRequest): Observable<CreateOrderResponse>;

  getOrder(request: GetOrderRequest): Observable<GetOrderResponse>;

  listOrders(request: ListOrdersRequest): Observable<ListOrdersResponse>;

  updateOrder(request: UpdateOrderRequest): Observable<UpdateOrderResponse>;

  deleteOrder(request: DeleteOrderRequest): Observable<DeleteOrderResponse>;
}

export interface OrderServiceController {
  createOrder(
    request: CreateOrderRequest,
  ): Promise<CreateOrderResponse> | Observable<CreateOrderResponse> | CreateOrderResponse;

  getOrder(request: GetOrderRequest): Promise<GetOrderResponse> | Observable<GetOrderResponse> | GetOrderResponse;

  listOrders(
    request: ListOrdersRequest,
  ): Promise<ListOrdersResponse> | Observable<ListOrdersResponse> | ListOrdersResponse;

  updateOrder(
    request: UpdateOrderRequest,
  ): Promise<UpdateOrderResponse> | Observable<UpdateOrderResponse> | UpdateOrderResponse;

  deleteOrder(
    request: DeleteOrderRequest,
  ): Promise<DeleteOrderResponse> | Observable<DeleteOrderResponse> | DeleteOrderResponse;
}

export function OrderServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createOrder", "getOrder", "listOrders", "updateOrder", "deleteOrder"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("OrderService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("OrderService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ORDER_SERVICE_NAME = "OrderService";
